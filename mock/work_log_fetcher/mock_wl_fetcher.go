// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duke0x/ts-notifier/tscalculator (interfaces: WorkLogFetcher)

// Package mock_worklog_fetcher is a generated GoMock package.
package mock_worklog_fetcher

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/duke0x/ts-notifier/model"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkLogFetcher is a mock of WorkLogFetcher interface.
type MockWorkLogFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockWorkLogFetcherMockRecorder
}

// MockWorkLogFetcherMockRecorder is the mock recorder for MockWorkLogFetcher.
type MockWorkLogFetcherMockRecorder struct {
	mock *MockWorkLogFetcher
}

// NewMockWorkLogFetcher creates a new mock instance.
func NewMockWorkLogFetcher(ctrl *gomock.Controller) *MockWorkLogFetcher {
	mock := &MockWorkLogFetcher{ctrl: ctrl}
	mock.recorder = &MockWorkLogFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkLogFetcher) EXPECT() *MockWorkLogFetcherMockRecorder {
	return m.recorder
}

// UserWorkedIssuesByDate mocks base method.
func (m *MockWorkLogFetcher) UserWorkedIssuesByDate(arg0 context.Context, arg1 model.User, arg2 time.Time) ([]model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserWorkedIssuesByDate", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserWorkedIssuesByDate indicates an expected call of UserWorkedIssuesByDate.
func (mr *MockWorkLogFetcherMockRecorder) UserWorkedIssuesByDate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserWorkedIssuesByDate", reflect.TypeOf((*MockWorkLogFetcher)(nil).UserWorkedIssuesByDate), arg0, arg1, arg2)
}

// WorkLogsPerIssues mocks base method.
func (m *MockWorkLogFetcher) WorkLogsPerIssues(arg0 context.Context, arg1 model.User, arg2, arg3 time.Time, arg4 []model.Issue) ([]model.WorkLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkLogsPerIssues", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]model.WorkLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkLogsPerIssues indicates an expected call of WorkLogsPerIssues.
func (mr *MockWorkLogFetcherMockRecorder) WorkLogsPerIssues(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkLogsPerIssues", reflect.TypeOf((*MockWorkLogFetcher)(nil).WorkLogsPerIssues), arg0, arg1, arg2, arg3, arg4)
}
