// Code generated by MockGen. DO NOT EDIT.
// Source: tscalc.go

// Package mock_tscalculator is a generated GoMock package.
package mock_tscalculator

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/duke0x/ts-notifier/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDayTypeFetcher is a mock of DayTypeFetcher interface.
type MockDayTypeFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockDayTypeFetcherMockRecorder
}

// MockDayTypeFetcherMockRecorder is the mock recorder for MockDayTypeFetcher.
type MockDayTypeFetcherMockRecorder struct {
	mock *MockDayTypeFetcher
}

// NewMockDayTypeFetcher creates a new mock instance.
func NewMockDayTypeFetcher(ctrl *gomock.Controller) *MockDayTypeFetcher {
	mock := &MockDayTypeFetcher{ctrl: ctrl}
	mock.recorder = &MockDayTypeFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDayTypeFetcher) EXPECT() *MockDayTypeFetcherMockRecorder {
	return m.recorder
}

// FetchDayType mocks base method.
func (m *MockDayTypeFetcher) FetchDayType(ctx context.Context, dt time.Time) (model.DayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDayType", ctx, dt)
	ret0, _ := ret[0].(model.DayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDayType indicates an expected call of FetchDayType.
func (mr *MockDayTypeFetcherMockRecorder) FetchDayType(ctx, dt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDayType", reflect.TypeOf((*MockDayTypeFetcher)(nil).FetchDayType), ctx, dt)
}

// MockWorkLogFetcher is a mock of WorkLogFetcher interface.
type MockWorkLogFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockWorkLogFetcherMockRecorder
}

// MockWorkLogFetcherMockRecorder is the mock recorder for MockWorkLogFetcher.
type MockWorkLogFetcherMockRecorder struct {
	mock *MockWorkLogFetcher
}

// NewMockWorkLogFetcher creates a new mock instance.
func NewMockWorkLogFetcher(ctrl *gomock.Controller) *MockWorkLogFetcher {
	mock := &MockWorkLogFetcher{ctrl: ctrl}
	mock.recorder = &MockWorkLogFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkLogFetcher) EXPECT() *MockWorkLogFetcherMockRecorder {
	return m.recorder
}

// UserWorkedIssuesByDate mocks base method.
func (m *MockWorkLogFetcher) UserWorkedIssuesByDate(ctx context.Context, user model.User, date time.Time) ([]model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserWorkedIssuesByDate", ctx, user, date)
	ret0, _ := ret[0].([]model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserWorkedIssuesByDate indicates an expected call of UserWorkedIssuesByDate.
func (mr *MockWorkLogFetcherMockRecorder) UserWorkedIssuesByDate(ctx, user, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserWorkedIssuesByDate", reflect.TypeOf((*MockWorkLogFetcher)(nil).UserWorkedIssuesByDate), ctx, user, date)
}

// WorkLogsPerIssues mocks base method.
func (m *MockWorkLogFetcher) WorkLogsPerIssues(ctx context.Context, user model.User, startedAfter, startedBefore time.Time, issues []model.Issue) ([]model.WorkLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkLogsPerIssues", ctx, user, startedAfter, startedBefore, issues)
	ret0, _ := ret[0].([]model.WorkLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkLogsPerIssues indicates an expected call of WorkLogsPerIssues.
func (mr *MockWorkLogFetcherMockRecorder) WorkLogsPerIssues(ctx, user, startedAfter, startedBefore, issues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkLogsPerIssues", reflect.TypeOf((*MockWorkLogFetcher)(nil).WorkLogsPerIssues), ctx, user, startedAfter, startedBefore, issues)
}
