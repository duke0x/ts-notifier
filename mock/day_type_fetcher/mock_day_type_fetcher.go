// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duke0x/ts-notifier/tscalculator (interfaces: DayTypeFetcher)

// Package mock_day_type_fetcher is a generated GoMock package.
package mock_day_type_fetcher

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/duke0x/ts-notifier/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDayTypeFetcher is a mock of DayTypeFetcher interface.
type MockDayTypeFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockDayTypeFetcherMockRecorder
}

// MockDayTypeFetcherMockRecorder is the mock recorder for MockDayTypeFetcher.
type MockDayTypeFetcherMockRecorder struct {
	mock *MockDayTypeFetcher
}

// NewMockDayTypeFetcher creates a new mock instance.
func NewMockDayTypeFetcher(ctrl *gomock.Controller) *MockDayTypeFetcher {
	mock := &MockDayTypeFetcher{ctrl: ctrl}
	mock.recorder = &MockDayTypeFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDayTypeFetcher) EXPECT() *MockDayTypeFetcherMockRecorder {
	return m.recorder
}

// FetchDayType mocks base method.
func (m *MockDayTypeFetcher) FetchDayType(arg0 context.Context, arg1 time.Time) (model.DayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDayType", arg0, arg1)
	ret0, _ := ret[0].(model.DayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDayType indicates an expected call of FetchDayType.
func (mr *MockDayTypeFetcherMockRecorder) FetchDayType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDayType", reflect.TypeOf((*MockDayTypeFetcher)(nil).FetchDayType), arg0, arg1)
}
